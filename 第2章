递归：
  为了解决一个给定的问题，算法一次或多次地递归调用其自身已解决紧密相关的若干子问题。
  
分治法：
  将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并
这些子问题的解来建立原问题的解。

分治模式在每层递归时都有三个步骤：
  1.分解原问题为若干子问题，这些子问题是原问题规模较小的实例
  2.解决这些子问题，递归地求解各子问题。然而，若子问题的规模足够小，则直接求解。
  3.合并这些子问题的解为原问题的解。
  
归并排序完全遵循分治模式：
  1.分解待排序的n个元素的序列为各具n/2个元素的子序列，直到待排序列长度为1
  2.使用归并排序递归地排序两个子序列
  3.合并两个已排序的子序列以产生已排序的答案
  
伪代码：
  MERGE-SORT(A, p, r)
    if p < r
      q = (p + r) / 2
      MERGE-SORT(A, p, q)
      MERGE-SORT(A, q + 1, r)
      MERGE(A, p, q, r)
      
  MERGE(A, p, q, r)
    n1 = q - p + 1
    n2 = r - q
    let L[1..n1 + 1] and R[1..n2 + 1] be new arrays
    for i = 1 to n1
      L[i] = A[p + i - 1]
    for j = 1 to n2
      R[j] = A[q + j]
    L[n1 + 1] = ∞
    R[n2 + 1] = ∞
    i = 1
    j = 1
    for k = p to r
      if L[i] <= R[j]
        A[k] = L[i]
        i = i + 1
      else
        A[k] = R[j]
        j = j + 1
        
ANSI C:
  void merge(int* array, int left, int half, int right)
  {
    int length = right - left + 1； 
    int array_copy[length]；
    int i = 0;
    for(i = 0; i < length; ++i){
      array_copy[i] = array[left + i];
    }
    int j,k;
    for(j = 0; j < half + 1;){
      for(k = half + 1; k < length); ){
        if(array_copy[j] < array_copy[k]){
          array[left++] = array_copy[j++];
        }
        else{
          array[left++] = array_copy[k++];
        }
      }
    }
  }
  void merge_sort(int* array, int left, int right)
  {
    if(left < right){
      int half = (left + right) / 2;
      merge_sort(array, left, half);
      merge_sort(array, half + 1, right);
      merge(array, left, half, right);  
    }
  }
  
时间复杂度：
  我们定义一个函数t(n), 表示算法需要解决一个样本规模为n的问题。
解决问题的一个高效的方法就是分治法，一个规模为n的问题将会被分成两个规模为n/2的子问题，这样递归的
解决问题，最后通过某些方法，将子问题的结果归并起来，作为最初问题的解：

	t(n) = 2 * t(n/2) + O(n)
	t(n/2) = 2 * t(n/4) + O(n/2)
	t(n) = 2 * [2 * t(n/4) + O(n/2)] + O(n)
	t(n) = 2 * [2 *[2 * t(n/8) + O(n/4)] + O(n/2)] + O(n)
	t(n) = 8 * t(n/8) + O(3*n)
	t(n) = 2^k * t(n/2^k) + O(K*n)

n = 2^k 停止， k = log n, t(1) = c:

	t(n) = n * c + O(nlogn)
	t(n) = O(nlogn)
  
