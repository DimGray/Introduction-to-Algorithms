分治策略
  在分治策略中，我们递归地求解一个问题， 在每层递归中应用如下三个步骤：
  分解（divide）步骤将问题划分为一些子问题，子问题的形式与原问题一样，只是规模更小
  解决（conquer）步骤递归地求解出子问题。如果子问题的规模足够小，则停止递归，直接求解
  合并（combine）步骤将子问题的解组合成原问题的解
  
  当子问题足够大，需要递归求解时，我们称之为递归情况（resursive case）。当子问题变得足够小，不再需要递归时，说
递归已经“触底”，进入了基本情况（base case）。有时，会有和原问题不完全一样的子问题，将这些子问题的求解看做合并步
骤的一部分。

递归式
  递归式与分治方法紧密相关，因为使用递归式可以很自然地刻画分治算法的运行时间。
  一个递归式（recurrence）就是一个等式或不等式，通过更小的输入上的函数值来描述一个函数。
  可以有很多形式，不必是原问题规模的固定比例。
  
三种求解递归式的方法
  代入法：我们猜测一个界，然后用数学归纳法证明这个界是正确的
  递归树法：将递归式转换为一棵树，其结点表示不同层次的递归调用产生的代价。然后采用边界和技术来求解递归式。
  主方法：可求解形如下面公式的递归式的界：
                      T(n) = aT(n/b) + f(n)
         其中，a >= 1, b > 1, f(n)是一个给定的函数。这种形式的递归式很常见，他刻画了这样一个分治算法：
         生成a个子问题，每个子问题的规模是原问题规模的1/b, 分解和合并步骤总共花费时间为f(n)

