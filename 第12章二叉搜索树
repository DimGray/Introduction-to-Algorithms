二叉搜索树
  根节点是树中唯一父指针为NIL的结点。
  设X为二叉搜索树中的一个结点，x左子树的值 <= x的值 <= x右子树的值

中序遍历（inorder tree walk）：输出的子树根位于左子树和右子树值之间
先序遍历（preorder tree walk）：输出的子树根位于左子树和右子树值之前
后序遍历（postorder tree walk）：输出的子树根位于左子树和右子树值之后
INORDER-TREE-WAlk(x)
  if x != NIL
    INORDER-TREE-WAlk(x.left)
    print x.key
    INORDER-TREE-WAlk(x.right)
时间复杂度：O(n)

查找
TREE-SEARCH(x, k)
  if x == NIL or k == x.key
    return x
  if k < x.key
    return TREE-SEARCH(x.left k)
  else
    return TREE-SEARCH(x.right, k)
ITERATIVE-TREE-SEARCH(x, k)
  while x != NIL and k != x.key
    if k < x.key
      x = x.left
    else x = x.right
  return x
时间复杂度：O(lgn)

最大关键字元素和最小关键字元素
TREE-MINIMUM(x)
  while x.left != NIL
    x = x.left
  return x
TREE-MAXIMUM(x)
  while x.right != NIL
    x = x.right
  return x
时间复杂度：O(lgn)

后继和前驱
TREE-SUCCESSOR(x)
  if x.right != NIL
    return TREE-MINIMUM(x.right)
  y = x.p
  while y != NIL and x == y.right
    x = y
    y = y.p
  return y
时间复杂度：O(lgn)
搜索，最大最小，前驱后继都是O(h)

